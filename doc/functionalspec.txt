=================================
 Superorganism a Meta-Bugtracker
=================================

A bug tracker which is highly extensible through add-ons to synchronize
bug tracking information with third party bug trackers.

Current Implementations
=======================

Following similar projects exist:

    * Launchpad: https://help.launchpad.net/Bugs/PluginAPISpec


Personas
========

Paul McGregor is an application developer and a spare time free software
contributor. He uses Bugzilla for his spare time projects, because
another GNOME hosted project he is also contributing to uses Bugzilla.
At work, he has to use the a work related self-developed solution, which
is more a hindrance than a bug tracker. He sometimes swears at it,
although he knows, that Bugzilla also sometimes has it's faults.  But,
at least, he can better organise his work.


Non Goals
=========

    * Yet another bug tracking system: There are already very good bug
      tracking systems out there.


Benefits
========

    * Fast key-based navigation in a textbased UI
    * Administrating bugs while offline (adding comments etc)
    * Highly extensible to interface with bug tracking systems through
      plug-ins.


Open Questions
==============

    * How do we implement *searching*?

    * How do we make sure, that attributes are correctly mapped. For
      example, if we store the bug status with the fields 'open',
      'resolved', but the bug tracker we're synching with uses different or
      more attributes. Either we have to retrieve status values from the
      synchronising bug-tracker, but what happens if we have more than one
      bug tracker? Or... we store our own status attributes, but have to
      provide an interface for a status/attribute mapping, which is *more
      preferrable*

    * Keeping the synchronization information out of the system would also
      allow to build a distributed bugtracking system, like a distributed
      version control. If that is of any use, I wonder.


Scenarios
=========

Adding Projects
---------------

Paul arrives at work on Monday morning. His Boss tells him, that he has
to work on a new project: a system for managing people in an aged care
facility. "Yet another management system.", he thinks. He quickly writes
a small spec, his boss reviews it and starts creating bugs in the bug
tracking system his company uses. This time though, he doesn't use the
administration interface of the company bug tracker, he uses the
Superorganism bugtracker.

He opens the Superorganism configfile, and adds detailed information
about the project: a `uid`, `title` (Adult Care) and a `description` to it. He saves
the configfile with his editor and starts his bug tracker. He can see a
few bug's he's been working on in the past, but none of them relate to
his newly created project.


Adding Bugs
-----------

Paul presses the `b` key. A new dialog is displayed where he can enter a
`title`, `descriptions` and a set of other attributes. He enters a
title: `Adult Care` and a description.  He presses the `Enter` key,
which defaults to the `Save` button displayed on the bottom of the
dialog. The new bug shows up in the overview screen.

.. admonition:: Technical note 

    Use Tags for version or category?


Chaning Bugdetails
------------------

Paul forgotten to mention a checkout URL for a depending product to
solve one of his newly created bugs. It's the bug with the bug number
`#15` which he can see by looking at the title. All bugs are listed and
sorted by number showing the title.

He clicks `Enter` on the bug which shows the details. He now presses the
`c` button which creates a new text field. He adds a note about the
depending product has to be checked out of a particular repository.
He presses `Enter` again to save the comment, which appears instantly in
the details view.


Resolving Bugs
--------------

Paul wants to resolve the issue with one of the bugs he created, which
turned out to be already fixed by another employee. He selects the bug
with the bug number `#7`, navigates to the `state` field, chooses
`FIXED` and presses the `Enter` button to resolve this bug as fixed.


Retrieving (Remote-) Bugs
-----------------------------------

The Boss calls Paul into his office. He tells him, that he created a
project on the companies bug tracker, where Paul should start putting
bugs in. "Already done.", Paul thinks. He goes back to his computer. He
opens up a config file and adds a new section for the new project called
`Adult Care`. He assigns the project URL from BugZilla and adds handler,
which is a little python script he wrote. The script will be in charge
of synchronising the bug and project information with Superorganism and
the company bugtracker.

Done editing, Paul restarts Superorganism and the bug tracker fetches
the new bug information in the background. Subsequently new bugs are
displayed on screen.

.. admonition:: Technical note 

    Adding more than one bug tracker to a project? What about attributes
    such as categories, version and other user defined information. Let
    the user provide a *manual* mapping or can this be automated?

    Maybe better to just add a list of bugs to a config file which are
    then tracked, but what about new bugs?


Screens
=======

Overview Screen
---------------

This is the default screen the user looks at after startup. This screen
shows by default:

    * all bugs created by the user (from multiple bug trackers if
      available)
    * all bugs assigned to the user (from multiple bug trackers if
      available)

Besides this overview, the user can filter the list of listed bugs by
using a key combination. By doing this, he can filter by any attribute.
For example, if the user want's to show all bugs for a particular
project, he would filter by the project=<Projectname> statement.

A visual line shows which bug the user currently selects. He can select
a different bug by pressing keys as well (preferrably up and down keys).

--------------------------------------- |
All         | 1 Date "Created By" Title |
------------| 2 Date "Created By" Title |
Project A   |                           |
Project B   |                           |
            |                           |
            |                           |
-----------------------------------------

The user can select a bug by pressing a key as well (preferrably Enter).


Detailed View
-------------

The detailed view shows detailed attributes such as comments, status,
version, project, etc. for the selected bug. It additionally shows which
bug trackers (if any are added) it synchronizes with. He can leave the
view by pressing the `q` key. He can also select the next bug by
pressing the `up` or `down` keys.

New Bug View
------------

If the user pressed the key for a new bug, a dialog helps him to enter
relevant bug information. The bug information will be a subset of the
attributes he normally looks at when choosing the `Detailed View`. By
pressing the `Enter` key, the bug is created.
