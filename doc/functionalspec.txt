======================================
 Superorganism a Meta-Bugtracker v1.0
======================================

A bug tracker which is highly extensible through add-ons to synchronize
bug tracking information with third party bug trackers.


Current Implementations
=======================

    * Launchpad: https://help.launchpad.net/Bugs/PluginAPISpec


Personas
========

Paul McGregor is an application developer and a spare time free software
contributor. He uses Bugzilla for his spare time projects, because
another GNOME hosted project he is also contributing to uses Bugzilla.
At work, he has to use the a work related self-developed solution, which
is more a hindrance than a bug tracker. He sometimes swears at it,
although he knows, that Bugzilla also sometimes has it's faults.  But,
at least, he can better organise his work.


Non Goals
=========

    * Yet another bug tracking system: There are already very good bug
      tracking systems out there.


Motivation
==========

Developers and companies are using different bug trackers. This has
causes potential problems:

    * holding login information for several systems
    * sometimes forces developers to use systems which have a bad
      usability

Using one bug tracking system which acts as a client to many others
would provide one interface for juggling bugs of many systems (esp of
those ones with bad usability).


Open Questions
==============

    * How do we implement *searching*?

    * How do we make sure, that attributes are correctly mapped. For
      example, if we store the bug status with the fields 'open',
      'resolved', but the bug tracker we're synching with uses different or
      more attributes. Either we have to retrieve status values from the
      synchronising bug-tracker, but what happens if we have more than one
      bug tracker? Or... we store our own status attributes, but have to
      provide an interface for a status/attribute mapping, which is *more
      preferrable*

    * Keeping the synchronization information out of the system would also
      allow to build a distributed bugtracking system, like a distributed
      version control. If that is of any use, I wonder.


Scenarios
=========

Adding Projects
---------------

Paul arrives at work on Monday morning. His Boss tells him, that he has
to work on a new project: a system for managing people in an aged care
facility. "Yet another management system.", he thinks. He quickly writes
a small spec. Unfortunately, his boss went off for a shopping spree in
the city, but Paul would like to start working on the system. No project
or anything has been created in the company bug tracker. Paul starts on
his own using Superorganism.

He opens the Superorganism configfile, and adds detailed information
about the project: a `uid`, `title` (Adult Care) and a `description` to
it. Additionally he also creates three `versions` which are associated
with the new project as well.


Adding Bugs
-----------

Paul presses the `b` key. A new dialog is displayed where he can enter a
`title`, `descriptions` and a set of other attributes. He also chooses
his newly created project from a selection box. Paul enters a title:
`Adult Care Dashboard` and a description. A `Keywords` field lets him
quickly enter keywords which describe the bug in a broader sense. He
navigates to the `Save` button and presses the `Enter` key on his
keyboard. The dialog disapears, Paul looks at the inital dashboard again
where his new bug shows up.

.. admonition:: Technical note

    Use Tags for version or category?


Changeing Bug Details
---------------------

Paul forgotten to mention a checkout URL for a depending product to
solve one of his newly created bugs. He looks at the dashboard of the
Superorganism bugtracker. Because each listed bug shows the title and
the unique bug number, he finds the corresponding bug with the missing
URL very quickly.

He presses the `Enter` key on the current selected bug to display the
details. He now presses the `c` button which creates a new text field.
He adds a note about the depending product has to be checked out of a
particular repository.  He presses `Enter` again to save the comment,
which appears instantly in the details view.

.. admonition:: Technical note

    Using an external editor for longer comments and descriptions?


Retrieving (Remote-) Bugs
-------------------------

The Boss calls Paul into his office. He tells him, that he created a
project on the companies bug tracker, where Paul should start putting
bugs in. "Already done.", Paul thinks. He goes back to his computer. He
opens up a config file and adds a new section for the new project called
`Adult Care`. He assigns the project URL from BugZilla and adds the name
of a utility which can synchronize the bug information.

Done editing, Paul restarts Superorganism and the bug tracker fetches
the new bug information in the background. Subsequently new bugs are
displayed on screen. Each bug gets a Superorganism id. Additionally, the
BugZilla id is displayed as well.


Managing Bugs with the Same/Similar Content
-------------------------------------------

During the import, Paul notices, that some of the bugs he already had
filed in Superorganism, were also filed on the company bug tracker. A
particular one with the bug no. #42: "Datepicker widget flickrs on the
23rid of december." is the same as bug no. #23 in Superorganism. He
selects the bug no. #42, and presses the `e` key for "edit". He
navigates to the `Duplicate of` field by pressing the `Tab` key and
enters: #23. He now navigates to the bottom of the dialog, selects
`Save` and presses the `Enter` key. The dialog closes and the
information is saved.

He can now see that bug no 42 is displayed under bug 23. The title is a
bit indented with a marker.

Paul quickly checks the company bug tracking system and enters the bug
number #42. Nothing changed here, the changes Paul did, where only
locally.


Synchronizing (Remote-) Buginformation
--------------------------------------

During the work on the system, more and more bugs are filed on the
company bug tracker. Paul is filing new bugs in his bug tracker and
assigns duplicates, which are filed on the company bug tracker to his
bugs.

.. admonition:: Technical note

    Each "imported" bug from a remote bug tracker is displayed as a
    duplicate bug and treated as "yet" another bug filed in the system.
    The bug filed against Superorganism should provide a view which
    assembles the important comment and attributes of all the duplicates
    together to a "meta-"view.
    That provides the flexibility, that the "same" bugs from different
    bug trackers can be managed under one Superorganism Bug, and comment
    and attribute changes can be synchronized with the "remote" bug
    tracking system.

He checks the duplicate of bug no. 23 (which he assigned in the prior
scenario). Edgar Mull, one of his collegues in the company, finally
entered the comment Paul was waiting for. Paul opens bug 42 to add
another comment to thank Edgar. He presses the `c` button, which opens
his configured external editor (vim). He writes a few words in the
editor, saves and closes it. The bug appears on the bug view, with a
little marker meaning that the changes on the comments wasn't
synchronized yet.

He navigates to the `Save & Synchronise` button, presses enter, which
synchronises the bug information and closes the dialog.


Resolving Bugs
--------------

Paul wants to resolve the issue with one of the bugs he created, which
turned out to be already fixed by another employee. He selects the bug
with the bug number `#7`. This bug was already fixed, before a bug was
created on the company bug tracker. Therefore only tracked "internally"
on Pauls Superorganism. He navigates to the `state` field, chooses
`FIXED`, adds a comment that the bug was already fixed before he had a
chance to look at, navigates to the `Save` button and presses `Enter`
which saves and resolves the bug as FIXED.


Resolving Bugs with Dependencies
--------------------------------

A different situation is bug no 23 which has a dependency to bug no 44.
Because #44 is not yet resolved on the company bug tracker, Paul can't
resolved his filed bug #23.

.. admonition:: Open question

    Mark the bug as internally fixed, which would mean it disappears
    from the default overview, but bring it internally into a sort of
    'reopen' state if something happens with the bug (new comments,
    etc).


Screens
=======

Overview Screen
---------------

This is the default screen the user looks at after startup. This screen
shows by default:

    * all bugs created by the user (from multiple bug trackers if
      available)
    * all bugs assigned to the user (from multiple bug trackers if
      available)

Besides this overview, the user can filter the list of bugs by using a
key combination. By doing this, he can filter by any attribute.  For
example, if the user want's to show all bugs for a particular project,
he would filter by the project=<Projectname> statement.

A visual line shows which bug the user currently selects. He can select
a different bug by pressing keys as well (preferrably up and down keys).

--------------------------------------- |
All         | 1 Date "Created By" Title |
------------| 2 Date "Created By" Title |
Project A   |                           |
Project B   |                           |
            |                           |
            |                           |
-----------------------------------------

The user can open the detailed view of a bug by pressing a key, which is
preferrably Enter.


Detailed View
-------------

The detailed view shows detailed attributes such as comments, status,
version, project, etc. for the selected bug. The comments are sorted by
date, showing the most recent on the top and the oldest at the bottom of
the view.

The detailed view is also a form, allowing changing attributes and
adding comments. At the bottom of the screen, a button for saving the
changes is displayed. Alternativly, the changes can also saved by
pressing a key (or key combination).


New Bug View
------------

If the user is pressing the key for a new bug, a dialog helps him to enter
relevant bug information. The bug information will be a subset of the
attributes he usually manages in the `Detailed View`. A `Save` button is
displayed in the lower end of the form, which saves the values entered
and creates a new bug entry in the system. Alternatively a key or key
combination can be used for saving the bug information.
