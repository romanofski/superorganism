===============
 Configuration
===============

The configuration utility provides low level parsing of the application
configuration and access to configuration options.

For reading the configuration syntax, ConfigParser is used.

Basic Configuration
===================

A basic configuration file would look like this:

>>> app_cfg = """
... [app]
... colors = colors
... keys = keys
... 
... [colors]
... statusbar = white, dark cyan,
... background = black, white,
... focus = black, dark cyan, standout
...
... [keys]
... views = buglist
...         newproject
...
... [buglist]
... f1 = help
... f2 = list_bugs
... """
>>> import tempfile
>>> configfile = tempfile.mktemp(suffix='.cfg')
>>> open(configfile, 'w').write(app_cfg)

We instantiate the configuration with the configuration file:

>>> import superorganism.config
>>> superorganism.config.Configuration('/tmp/foobar_not_existing_config.cfg')
Traceback (most recent call last):
IOError: Supplied configfile doesn't exist: /tmp/foobar_not_existing_config.cfg

Whoops - that was the wrong path to the configuration file.

>>> cfg = superorganism.config.Configuration(configfile)
>>> cfg
<superorganism.config.Configuration object at 0x...>

Let's also verify, that the configuration utility implements it's
interface:

>>> import zope.interface.verify
>>> import superorganism.interfaces
>>> zope.interface.verify.verifyObject(
...     superorganism.interfaces.IConfiguration, cfg)
True


Color Configuration
===================

Colors are registered with the applications screen.

>>> screen = superorganism.gui.tests.Screen()
>>> cfg.configure_colors(screen)
color palette registered for statusbar
color palette registered for focus
color palette registered for background

Keys
====

Keys can be registered for actions for each view. Each view provides
therefore a number of actions, which will be implemented as adapters. We
can asked about the registered viewnames first:

>>> cfg.get_registered_viewnames()
['buglist', 'newproject']

And the registered keys with their actions afterwards:

>>> cfg.get_keys_for('buglist')
{'f1': 'help', 'f2': 'list_bugs'}

Providing a viewname, which we haven't keys registered for results in an
error:

>>> cfg.get_keys_for('foobar')
Traceback (most recent call last):
ValueError: Not registered viewname: foobar
