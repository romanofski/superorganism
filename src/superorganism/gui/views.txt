=======
 Views
=======

:doctest:
:setup: superorganism.tests.setUp


Views render the application, it's widgets and handle the input from the
user. A basic view is a named adapter, adapting a content object and the
app with a setup urwid screen. Depending on which key is pressed by the
user, a view is created.

Basic View
==========

We first create we need a content object. That will be obviously for a
bugtracker a project:

>>> import zope.component
>>> import zope.component.interfaces
>>> project = zope.component.getUtility(
...     zope.component.interfaces.IFactory,
...     u'superorganism.Project')(
...         'project', '<Title>', '<Description>')

In order to render the project, we also need a screen. Because our
application is a Terminal application, the screen or canvas we're
drawing on would take care of the lower level conversion between our
program and the terminal. The screen is an urwid display screen object.
We use a screen mock:

>>> import superorganism.tests
>>> screen = superorganism.tests.Screen()

For the project to be rendered, we also need to create a view which
renders the project on the users screen. The view is a multiadapter
adapting the content object and the screen in which we would like to
render the content:

>>> import superorganism.interfaces
>>> import superorganism.gui.interfaces
>>> import superorganism.gui.view
>>> import zope.component
>>> class Projects(superorganism.gui.view.BaseView):
...
...     zope.interface.implements(superorganism.gui.interfaces.ITerminalView)
...     zope.component.adapts(superorganism.interfaces.IProject,
...                           superorganism.gui.interfaces.IScreen)
...

The adapter now needs to be registered with the component architecture:

>>> import zope.component
>>> zope.component.provideAdapter(Projects)

Let's try out our view:

>>> view = zope.component.getMultiAdapter((project, screen))
>>> view.render()
(helpbar) Topbar
(background)...
(input) F2
(statusbar)...

We want to verify if the view implements it's interface:

>>> import zope.interface.verify
>>> zope.interface.verify.verifyObject(
...     superorganism.gui.interfaces.ITerminalView, view)
True
