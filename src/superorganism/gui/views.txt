=======
 Views
=======

Views render the application, it's widgets and handle the input from the
user. A basic view is a named adapter, adapting a content object and the
app with a setup urwid screen. Depending on which key is pressed by the
user, a view is created.

Basic View
==========

We first create we need a content object. That will be obviously for a
bugtracker a bug:

>>> import superorganism.bug
>>> bug = superorganism.bug.Bug(1, u'New Bug', u'Bla bla')

We create now a Dashboard widget. This would usually use a urwid widget
(e.g. frame) to display the text. We just use a dummy type which
implements IDashboard for this, otherwise we may screw up the tests with
the ncurses behaviour:

>>> import zope.interface
>>> class IDashboard(zope.interface.Interface):
...     """Dashboard widget."""
...
>>> class Dashboard(object):
...     zope.interface.implements(IDashboard)
...     name = u'Dashboard'


For the bug to be rendered, we also need to create a View which renders
the bug on the users screen. The view is a multiadapter adapting the
content object and the widget in which we would like to render the
content:

>>> import superorganism.interfaces
>>> import superorganism.gui.interfaces
>>> import superorganism.gui.view
>>> import zope.component
>>> class BugView(superorganism.gui.view.View):
...
...     zope.interface.implements(superorganism.gui.interfaces.IView)
...     zope.component.adapts(superorganism.interfaces.IBug, IDashboard)
...
...     def render(self):
...         print (self.context, self.widget)

The adapter now needs to be registered with the component architecture:

>>> import zope.component
>>> zope.component.provideAdapter(BugView)

Let's try out our view:

>>> dash = Dashboard()
>>> view = zope.component.getMultiAdapter((bug, dash))
>>> view.render()
(<Bug 1>, <Dashboard object at 0x...>)
