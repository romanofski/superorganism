=======
 Views
=======

:doctest:
:setup: superorganism.tests.setUp


Views render the application, it's widgets and handle the input from the
user. A basic view is a named adapter, adapting a content object and the
app with a setup urwid screen. Depending on which key is pressed by the
user, a view is created.

Basic View
==========

We first create we need a content object. That will be obviously for a
bugtracker a bug:

>>> import superorganism.bug
>>> bug = superorganism.bug.Bug(1, u'New Bug', u'Bla bla')

We create now a Dashboard screen. The screen is an urwid display screen
object. We use a screen mock:

>>> import superorganism.tests
>>> screen = superorganism.tests.Screen()

For the bug to be rendered, we also need to create a View which renders
the bug on the users screen. The view is a multiadapter adapting the
content object and the screen in which we would like to render the
content:

>>> import superorganism.interfaces
>>> import superorganism.gui.interfaces
>>> import superorganism.gui.view
>>> import zope.component
>>> class BugList(superorganism.gui.view.BaseView):
...
...     zope.interface.implements(superorganism.gui.interfaces.ITerminalView)
...     zope.component.adapts(superorganism.interfaces.IBug,
...                           superorganism.gui.interfaces.IScreen)
...

The adapter now needs to be registered with the component architecture:

>>> import zope.component
>>> zope.component.provideAdapter(BugList)

Let's try out our view:

>>> view = zope.component.getMultiAdapter((bug, screen))
>>> view.render()
(helpbar) Topbar
(background)...
(statusbar)...
