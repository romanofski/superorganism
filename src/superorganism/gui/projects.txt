===============
 Project Views
===============

:doctest:
:setup: superorganism.tests.setUp

Projects are container like objects, which hold bug related information.

Setup
=====

Before we start with the test, we need a blank project we can adapt the
view on. Additionally we also need a testing screen, which renders the
form:

>>> import zope.component
>>> import zope.component.interfaces
>>> import superorganism.tests
>>> screen = superorganism.tests.Screen()

Usually the project is created in the root of the database. Because the
view relies on that behaviour, we have to set the parent of the project
to be the application:

>>> import superorganism.app
>>> app = superorganism.app.Application()
>>> project = zope.component.getUtility(
...     zope.component.interfaces.IFactory,
...     u'superorganism.Project')(
...         'project', '<Title>', '<Description>')
>>> project.__parent__ = app

Editing Projects
================

Paul arrives at work on Monday morning. His Boss tells him, that he has
to work on a new project: a system for managing people in an aged care
facility. "Yet another management system.", he thinks. He quickly writes
a small spec and starts Superorganism.
Paul presses the "p" key which opens the dialog to create a new project:

XXX Needs to be refactored - the initial newproject form is rather an
XXX editproject form.


>>> view = zope.component.getMultiAdapter(
...     (project, screen), name='editproject')
>>> view.render()
(helpbar) Topbar
(focus) Projecttitle
(background) Project Description
(background) Versions
...
(input) F10
(statusbar)...

He fills out the fields about `title` (Adult Care) and a `description`.
Two text widgets allow entering keyword information. He adds two
versions, for the `versions` field and two components for the
`component` field. He navigates to the `Save` button, presses the
`Enter` key, saves the form and the new Project is created.
