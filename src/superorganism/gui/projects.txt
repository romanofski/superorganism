===============
 Project Views
===============

:doctest:
:setup: superorganism.tests.setUp

Projects are container like objects, which hold bug related information.


Adding Projects
===============

Paul arrives at work on Monday morning. His Boss tells him, that he has
to work on a new project: a system for managing people in an aged care
facility. "Yet another management system.", he thinks. He quickly writes
a small spec and starts Superorganism.  Paul opens Superorganism,

>>> import zope.component
>>> import zope.component.interfaces
>>> import superorganism.tests
>>> import superorganism.app
>>> app = superorganism.app.Application()
>>> screen = superorganism.tests.Screen()

Note: We have to set the input buttons to quit the view, otherwise the
save action runs the projects view into a while loop and the tests won't
finish:

>>> screen.input = ['f10']

presses the "f2" key for creating a new project:

>>> view = zope.component.getMultiAdapter(
...     (app, screen), name='addproject')
>>> view.render()
(helpbar) Topbar
(focus) Projecttitle...
(background) Project Description...
(background) Versions...
...
(input) F10
(statusbar)...

He fills out the fields about `title` (Adult Care) and a `description`.

>>> view.formwidgets[0].label
u'Projecttitle'
>>> view.formwidgets[0]._w.edit.set_edit_text(u'Adult Care')
>>> view.formwidgets[1].label
u'Project Description'
>>> view.formwidgets[1]._w.edit.set_edit_text(u'Project about adult care')

Two text widgets allow entering keyword information. He adds two
versions, for the `versions` field and two components for the
`component` field. He saves the form by pressing the `f3` key.

>>> data = view.extractData()
>>> data
{'versions': '', 'description': u'Project about adult care', 'title': u'Adult Care'}

The user is redirected to the list of projects after saving the form. XXX The project
appears currently in the bug list.

>>> view.save()
(helpbar) Topbar
(focus) Adult Care
...
(input) F2
(statusbar) ...

Paul created a new project:

>>> project = app.values()[0]
>>> project.title == data['title']
True
>>> project.description == data['description']
True

Editing Projects
================

Paul mixed the project title up with a different project. He has to
change the title.

>>> screen = superorganism.tests.Screen()
>>> screen.input = ['f10']
>>> projectlist = zope.component.getMultiAdapter(
...     (app, screen), superorganism.gui.interfaces.ITerminalView)
>>> projectlist.edit_project()
(helpbar) Topbar
(focus) Projecttitle...
(background) Project Description...
(background) Versions...
...
(input) F10
(statusbar)...

He selects the project in Superorganism and edits it:

>>> view = zope.component.getMultiAdapter(
...     (project, screen), name='editproject')
>>> view.render()
(helpbar) Topbar
(focus) Projecttitle...
(background) Project Description...
(background) Versions...
...
(input) F10
(statusbar)...
>>> view.formwidgets[0].label == 'Projecttitle'
True
>>> view.formwidgets[0].value
u'Adult Care'

Paul changes the title to:

>>> view.formwidgets[0]._w.edit.set_edit_text(u'Superorganism Project')

And saves his changes:

>>> view.save()
(helpbar) ...
>>> project.title
u'Superorganism Project'


Deleting Projects
=================

The project paul created was not the one he wanted. Instead of editing
it again, he's sick and tired of it and deletes it:

>>> len(app.values()) == 1
True
>>> projectlist = zope.component.getMultiAdapter(
...     (app, screen), superorganism.gui.interfaces.ITerminalView)
>>> projectlist.delete_project()
(helpbar) ...

The internal widget (which is a listwalker widget here) is used to
determine the currently focused project. This project will be deleted:

>>> len(app.values()) == 0
True
